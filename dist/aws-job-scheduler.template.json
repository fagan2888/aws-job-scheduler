{"AWSTemplateFormatVersion":"2010-09-09","Transform":"AWS::Serverless-2016-10-31","Description":"https://github.com/monken/aws-ecr-public","Parameters":{"TableName":{"Type":"String","Default":"aws-job-scheduler","Description":"Name of dynamodb table"}},"Resources":{"Dynamodb":{"Type":"AWS::DynamoDB::Table","Properties":{"AttributeDefinitions":[{"AttributeName":"jobUUID","AttributeType":"S"},{"AttributeName":"jobType","AttributeType":"S"},{"AttributeName":"TTL","AttributeType":"N"}],"BillingMode":"PAY_PER_REQUEST","KeySchema":[{"AttributeName":"jobUUID","KeyType":"HASH"},{"AttributeName":"TTL","KeyType":"RANGE"}],"GlobalSecondaryIndexes":[{"IndexName":"jobType-TTL-index","KeySchema":[{"AttributeName":"jobType","KeyType":"HASH"},{"AttributeName":"TTL","KeyType":"RANGE"}],"Projection":{"ProjectionType":"ALL"}}],"TableName":{"Ref":"TableName"}}},"CloudwatchLambdaRule":{"Type":"AWS::Events::Rule","Properties":{"Name":"TriggerJobScheduler","ScheduleExpression":"rate(10 minutes)","State":"ENABLED","Targets":[{"Arn":{"Fn::GetAtt":["Lambda","Arn"]},"Id":{"Ref":"Lambda"}}]}},"CloudWatchLambdaPermission":{"Type":"AWS::Lambda::Permission","Properties":{"Action":"lambda:InvokeFunction","FunctionName":{"Fn::GetAtt":["Lambda","Arn"]},"Principal":"events.amazonaws.com","SourceAccount":{"Fn::Sub":"${AWS::AccountId}"},"SourceArn":{"Fn::GetAtt":["CloudwatchLambdaRule","Arn"]}}},"Lambda":{"Type":"AWS::Serverless::Function","Properties":{"Handler":"index.handler","Runtime":"nodejs8.10","InlineCode":"/* eslint-disable */\nconst AWS = require('aws-sdk')\n\nAWS.config.update({ region: 'us-east-1' });\nconst dynamodb = new AWS.DynamoDB.DocumentClient();\nconst lambda = new AWS.Lambda();\n\nconst tableName = \"aws-job-scheduler\"\n\nexports.handler = async (event, context, callback) => {\n\n  try {\n    console.log(event)\n    console.log(\"Checking scheduled default jobs...\")\n\n    // Pull all emailJob cron jobs that have a date that is expired\n    let totalJobs = []\n    let lastEvalKey = true\n    let firstTime = true\n    while(lastEvalKey) {\n      let params = {\n        TableName: tableName,\n        IndexName: \"jobType-TTL-index\",\n        KeyConditionExpression: 'jobType = :j and #t < :d',\n        ExpressionAttributeNames: {\n          '#t': \"TTL\",\n        },\n        ExpressionAttributeValues: {\n          ':d': Math.floor(new Date() / 1000),\n          ':j': 'default'\n        },\n      };\n\n      if( !firstTime && lastEvalKey) {\n        params.ExclusiveStartKey = lastEvalKey\n      }\n\n      let result = await dynamodb.query(params).promise()\n      //console.log(result)\n\n      if( result.LastEvaluatedKey ) {\n        lastEvalKey = result.LastEvaluatedKey\n      } else {\n        lastEvalKey = false\n      }\n\n      totalJobs = totalJobs.concat(result.Items)\n      firstTime = false\n    }\n\n    console.log(totalJobs.toString())\n    \n    // Invoke the job's lambda function\n    for(const job of totalJobs) {\n\n      const invokeParams = {\n        FunctionName: job.lambdaFuncArn,\n        Payload: job.body // this should already be json-ified\n      }\n\n      lambda.invoke(invokeParams).promise()\n      \n      const deleteParams = {\n        TableName : \"aws-job-scheduler\",\n        Key: {\n          jobUuid: job.jobUuid,\n          TTL: job.TTL\n        }\n      };\n      console.log(\"Deleting job. \" + deleteParams.toString())\n\n      dynamodb.delete(deleteParams).promise()\n    }\n\n    console.log(\"Successfully checked scheduled jobs.\")\n    callback(null, \"Successfully checked scheduled default jobs.\");\n\n  } catch (error) {\n    console.log(error.message)\n    callback(null, \"Error checking scheduled default jobs.\" + error.message)\n  }\n}\n\n","Timeout":30,"Policies":[{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["dynamodb:Query","dynamodb:Delete"],"Resource":[{"Fn::Sub":"${Dynamodb.Arn}/index/jobType-TTL-index"},{"Fn::GetAtt":["Dynamodb","Arn"]}]},{"Effect":"Allow","Action":["lambda:Invoke"],"Resource":"*"},{"Effect":"Allow","Action":["logs:CreateLogStream"],"Resource":"*"},{"Effect":"Allow","Action":["logs:PutLogEvents"],"Resource":"*"}]}]}}},"Outputs":{"LambdaExecutionRoleName":{"Value":{"Ref":"LambdaRole"},"Export":{"Name":{"Fn::Sub":"${AWS::StackName}:LambdaExecutionRoleName"}}}}}
